{"version":3,"sources":["api.js","gan/gan.js","topbar/topbar.js","App.js","reportWebVitals.js","index.js"],"names":["getGeneratedImage","axios","post","then","res","console","log","data","catch","err","alert","GAN","useState","generatedImage","setImage","useEffect","ImageBytes","className","src","alt","onSubmit","e","preventDefault","submitForm","type","useStyles","makeStyles","theme","root","flexGrow","marginBottom","spacing","menuButton","marginRight","title","TopBar","props","classes","AppBar","position","Toolbar","Typography","variant","App","path","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qRAEaA,EAAoB,WAC/B,OAAOC,IAAMC,KAAK,mBACjBC,MAAK,SAAAC,GAEJ,OADAC,QAAQC,IAAIF,GACLA,EAAIG,QAEZC,OAAM,SAAAC,GACLC,MAAMD,OC8BKE,MAnCf,WAAgB,IAAD,EACsBC,oBAAU,GADhC,mBACNC,EADM,KACUC,EADV,KAkBb,OAPAC,qBAAU,WACRf,IACCG,MAAK,SAAAC,GACJU,EAASV,EAAIY,iBAEZ,IAGD,sBAAKC,UAAU,WAAf,UACE,kDAEA,qBAAKA,UAAU,UAAUC,IAAG,gCAA2BL,GAAkBM,IAAI,UAG7E,sBAAMC,SAAU,SAAAC,GAAC,OAtBJ,SAACA,GAClBA,EAAEC,iBACFtB,IACCG,MAAK,SAAAC,GACJU,EAASV,EAAIY,eAkBUO,CAAWF,IAAhC,SACA,wBAAQG,KAAK,SAAb,kC,gCCpBFC,EAAYC,aAAW,SAACC,GAAD,MAAY,CACvCC,KAAM,CACJC,SAAU,EACVC,aAAcH,EAAMI,QAAQ,IAE9BC,WAAY,CACVC,YAAaN,EAAMI,SAAS,IAE9BG,MAAO,CACLL,SAAU,OA8BCM,MAxBf,SAAgBC,GACd,IAAMC,EAAUZ,IAOd,OACE,qBAAKR,UAAWoB,EAAQT,KAAxB,SACA,cAACU,EAAA,EAAD,CAAQC,SAAS,SAAjB,SACA,cAACC,EAAA,EAAD,UAIE,cAACC,EAAA,EAAD,CAAYC,QAAQ,KAAKzB,UAAWoB,EAAQH,MAA5C,SACGE,EAAMF,eCjBFS,MAlBf,WAEE,OACE,qBAAK1B,UAAU,MAAf,SACE,cAAC,IAAD,UACE,cAAC,IAAD,UAEE,eAAC,IAAD,CAAO2B,KAAK,IAAZ,UACE,cAAC,EAAD,CAAQV,MAAM,oCACd,cAAC,EAAD,cCHGW,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqB5C,MAAK,YAAkD,IAA/C6C,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.3cbf97b9.chunk.js","sourcesContent":["import axios from 'axios';\r\n\r\nexport const getGeneratedImage = () => {\r\n  return axios.post('/generate/image')\r\n  .then(res => {\r\n    console.log(res)\r\n    return res.data;\r\n  })\r\n  .catch(err => {\r\n    alert(err);\r\n  })\r\n}\r\n","import React, {useState, useEffect} from 'react';\r\nimport './gan.css';\r\nimport { getGeneratedImage } from '../api';\r\n\r\nfunction GAN() {\r\n  const [generatedImage, setImage] = useState(-1);\r\n\r\n  const submitForm = (e) => {\r\n    e.preventDefault();\r\n    getGeneratedImage()\r\n    .then(res => {\r\n      setImage(res.ImageBytes);\r\n    })\r\n  }\r\n\r\n  useEffect(() => {\r\n    getGeneratedImage()\r\n    .then(res => {\r\n      setImage(res.ImageBytes);\r\n      })\r\n    }, [])\r\n\r\n  return (\r\n      <div className=\"main-div\">\r\n        <p>dog today only :D</p>\r\n        \r\n        <img className='gallery' src={`data:image/png;base64,${generatedImage}`} alt=\"doggo\" >\r\n        </img>\r\n\r\n        <form onSubmit={e => submitForm(e)} >\r\n        <button type=\"submit\">\r\n            Visit New Dog!\r\n        </button>\r\n        </form>\r\n\r\n      </div>\r\n  );\r\n}\r\n\r\nexport default GAN;\r\n","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\n// import Button from '@material-ui/core/Button';\r\n// import IconButton from '@material-ui/core/IconButton';\r\n// import HomeIcon from '@material-ui/icons/Home';\r\n// import { useHistory } from 'react-router-dom';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    flexGrow: 1,\r\n    marginBottom: theme.spacing(5)\r\n  },\r\n  menuButton: {\r\n    marginRight: theme.spacing(-5),\r\n  },\r\n  title: {\r\n    flexGrow: 1,\r\n  },\r\n}));\r\n\r\n\r\n\r\nfunction TopBar(props) {\r\n  const classes = useStyles();\r\n  // const history = useHistory();\r\n\r\n  // function goHome(){\r\n  //   history.push('/');\r\n  // }\r\n\r\n    return(\r\n      <div className={classes.root}>\r\n      <AppBar position=\"static\">\r\n      <Toolbar>\r\n        {/* <IconButton edge=\"start\" className={classes.menuButton} color=\"inherit\" aria-label=\"menu\" onClick={goHome}>\r\n          <HomeIcon />\r\n        </IconButton> */}\r\n        <Typography variant=\"h6\" className={classes.title}>\r\n          {props.title}\r\n        </Typography>\r\n      </Toolbar>\r\n    </AppBar>\r\n  </div>\r\n  )\r\n}\r\n\r\nexport default TopBar;","import './App.css';\r\nimport React from 'react';\r\nimport { BrowserRouter as Router, Switch, Route} from 'react-router-dom';\r\nimport GAN from './gan/gan'\r\nimport TopBar from './topbar/topbar';\r\n\r\nfunction App() {\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <Router>\r\n        <Switch>\r\n\r\n          <Route path=\"/\">\r\n            <TopBar title=\"Gallery of Totally Real Animals\"/>\r\n            <GAN/>\r\n          </Route>\r\n          \r\n        </Switch>\r\n      </Router>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}